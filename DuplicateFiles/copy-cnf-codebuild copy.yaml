AWSTemplateFormatVersion: "2010-09-09"
Description: Backup terraform.state to s3
Parameters:
  SourceBucketName:
    Description: Enter Source bucket name which stores terraform state file
    Type: String
  DestinationBucketName:
    Description: Enter Destination bucket name which stores backup
    Type: String
  LambdaCodeBucketName:
    Description: Enter Bucket name which contains python as zip file
    Type: String
  LambdaZipFileName:
    Description: Enter Zip file name which contains lambda function inside bucket 'LambdaCodeBucketName'
    Type: String
  AccountID:
    Description: Enter Account ID from which dynamodb has to backup
    Type: String
  Region:
    Description: Enter AWS Region
    Type: String
    Default: us-east-1
  TerraformStateTableName:
    Description: Enter DynamoDb Table Name which locks terraform state
    Type: String
    Default: terraform_state
  BackupTableName: 
    Description: "Enter Dynamodb Table Name that you want to BackUp, Comma-delimited list"
    Type: CommaDelimitedList
    Default: "NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL"
  SourceGihubRepoUrl:
    Description: Enter Github Repo url that contains build script and build files
    Type: String
    Default: https://github.com/anandshivam44/build
Resources:
  TerraformStateDynamodbBackupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - codebuild.amazonaws.com
  TerraformStateDynamodbBackupPolicy: # proper names #STS Assume role
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TerraformStateDynamodbBackupPolicy
      Roles:
        - !Ref TerraformStateDynamodbBackupRole   
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${DestinationBucketName}"
              - !Sub "arn:aws:s3:::${DestinationBucketName}/*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListAccessPointsForObjectLambda
              - s3:GetObjectVersionTagging
              - s3:GetStorageLensConfigurationTagging
              - s3:GetObjectAcl
              - s3:GetBucketObjectLockConfiguration
              - s3:GetIntelligentTieringConfiguration
              - s3:GetObjectVersionAcl
              - s3:GetBucketPolicyStatus
              - s3:GetObjectRetention
              - s3:GetBucketWebsite
              - s3:GetJobTagging
              - s3:ListJobs
              - s3:GetObjectLegalHold
              - s3:GetBucketNotification
              - s3:GetReplicationConfiguration
              - s3:ListMultipartUploadParts
              - s3:GetObject
              - s3:DescribeJob
              - s3:GetAnalyticsConfiguration
              - s3:GetObjectVersionForReplication
              - s3:GetAccessPointForObjectLambda
              - s3:GetStorageLensDashboard
              - s3:GetLifecycleConfiguration
              - s3:GetAccessPoint
              - s3:GetInventoryConfiguration
              - s3:GetBucketTagging
              - s3:GetAccessPointPolicyForObjectLambda
              - s3:GetBucketLogging
              - s3:ListBucketVersions
              - s3:ListBucket
              - s3:GetAccelerateConfiguration
              - s3:GetBucketPolicy
              - s3:GetEncryptionConfiguration
              - s3:GetObjectVersionTorrent
              - s3:GetBucketRequestPayment
              - s3:GetAccessPointPolicyStatus
              - s3:GetObjectTagging
              - s3:GetMetricsConfiguration
              - s3:GetBucketOwnershipControls
              - s3:GetBucketPublicAccessBlock
              - s3:ListBucketMultipartUploads
              - s3:GetAccessPointPolicyStatusForObjectLambda
              - s3:ListAccessPoints
              - s3:GetBucketVersioning
              - s3:GetBucketAcl
              - s3:GetAccessPointConfigurationForObjectLambda
              - s3:ListStorageLensConfigurations
              - s3:GetObjectTorrent
              - s3:GetStorageLensConfiguration
              - s3:GetAccountPublicAccessBlock
              - s3:ListAllMyBuckets
              - s3:GetBucketCORS
              - s3:GetBucketLocation
              - s3:GetAccessPointPolicy
              - s3:GetObjectVersion
            Resource:
              - !Sub "arn:aws:s3:::${SourceBucketName}"
              - !Sub "arn:aws:s3:::${SourceBucketName}"/*
          - Effect: Allow
            Action:
              - dynamodb:ListTables
              - dynamodb:DescribeContributorInsights
              - dynamodb:ListTagsOfResource
              - dynamodb:DescribeReservedCapacityOfferings
              - dynamodb:PartiQLSelect
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:DescribeContinuousBackups
              - dynamodb:DescribeExport
              - dynamodb:DescribeKinesisStreamingDestination
              - dynamodb:ListExports
              - dynamodb:DescribeLimits
              - dynamodb:BatchGetItem
              - dynamodb:ConditionCheckItem
              - dynamodb:ListBackups
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:DescribeStream
              - dynamodb:DescribeTimeToLive
              - dynamodb:ListStreams
              - dynamodb:ListContributorInsights
              - dynamodb:DescribeGlobalTableSettings
              - dynamodb:ListGlobalTables
              - dynamodb:GetShardIterator
              - dynamodb:DescribeGlobalTable
              - dynamodb:DescribeReservedCapacity
              - dynamodb:DescribeBackup
              - dynamodb:GetRecords
              - dynamodb:DescribeTableReplicaAutoScaling
            Resource:
              - !Sub arn:aws:dynamodb:${Region}:${AccountID}:table/*
  TerraformStateBackup:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: TerraformStateBackup
      Description: Backup terraform.state to s3
      ServiceRole: !GetAtt TerraformStateDynamodbBackupRole.Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: SOURCE_BUCKET_NAME
            Value: !Ref SourceBucketName
          - Name: TARGET_BUCKET_NAME
            Value: !Ref DestinationBucketName
          - Name: REGION
            Value: !Ref Region
          - Name: STATE_LOCK_TABLE_NAME
            Value: !Ref TerraformStateTableName
          - Name: BACKUP_TABLE_NAME_0
            Value: !Select [ 0, !Ref BackupTableName ]
          - Name: BACKUP_TABLE_NAME_1
            Value: !Select [ 1, !Ref BackupTableName ]
          - Name: BACKUP_TABLE_NAME_2
            Value: !Select [ 2, !Ref BackupTableName ]
          - Name: BACKUP_TABLE_NAME_3
            Value: !Select [ 3, !Ref BackupTableName ]
          - Name: BACKUP_TABLE_NAME_4
            Value: !Select [ 4, !Ref BackupTableName ]
          - Name: BACKUP_TABLE_NAME_5
            Value: !Select [ 5, !Ref BackupTableName ]
          - Name: BACKUP_TABLE_NAME_6
            Value: !Select [ 6, !Ref BackupTableName ]
          - Name: BACKUP_TABLE_NAME_7
            Value: !Select [ 7, !Ref BackupTableName ]
          - Name: BACKUP_TABLE_NAME_8
            Value: !Select [ 8, !Ref BackupTableName ]
          - Name: BACKUP_TABLE_NAME_9
            Value: !Select [ 9, !Ref BackupTableName ]
      Source:
        Location: !Ref SourceGihubRepoUrl
        Type: GITHUB
      TimeoutInMinutes: 15
  TriggerBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt "TerraformStateBackup.Arn"
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Start starts build for a code build project
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt "TriggerBuildRole.Arn"
      Timeout: 20
      MemorySize: 128
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: !Ref LambdaZipFileName
      Environment:
        Variables:
          PROJECT_NAME: !Ref "TerraformStateBackup"
    
